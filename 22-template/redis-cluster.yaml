apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: redis-persistent-template
message: |-
  The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.

         Password: ${REDIS_PASSWORD}
   Connection URL: redis://${DATABASE_SERVICE_NAME}:6379/

  For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/redis-container/blob/master/5.
metadata:
  annotations:
    description: |-
      Redis Cluster with PersistenVolume (1Gi)

      after resource created, create cluster with command redis-cli --cluster create {redis-0 IP}:6379 {redis-1 IP}:6379 {redis-2 IP}:6379 {redis-3 IP}:6379 {redis-4 IP}:6379 {redis-5 IP}:6379 --cluster-replicas 1

      NOTE: You must have persistent volumes available in your cluster to use this template.
    iconClass: icon-redis
    openshift.io/display-name: Redis-Cluster
    openshift.io/documentation-url: https://github.com/sclorg/redis-container/tree/master/5
    openshift.io/long-description: This template provides a Redis-Cluster server.  The
      node.conf is stored on persistent storage.
    samples.operator.openshift.io/version: 4.10.3
    tags: database,redis
  labels:
    samples.operator.openshift.io/managed: "true"
  name: redis-cluster
  namespace: openshift
objects:
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-password: '{.data[''database-password'']}'
    name: ${DATABASE_SERVICE_NAME}
  stringData:
    database-password: ${REDIS_PASSWORD}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: redis://{.spec.clusterIP}:{.spec.ports[?(.name=="redis")].port}
    name: ${DATABASE_SERVICE_NAME}    
  spec:
    ports:
    - name: redis
      port: 6379
      targetPort: 6379
    selector:
      name: ${DATABASE_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
    clusterIP: None
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${DATABASE_SERVICE_NAME}
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    name: ${DATABASE_SERVICE_NAME}
  spec:
    selector:
      matchLabels:
        name: ${DATABASE_SERVICE_NAME}
    serviceName: ${DATABASE_SERVICE_NAME}
    replicas: 6
    template:
      metadata:
        labels:
          name: ${DATABASE_SERVICE_NAME}
      spec:
        initContainers:
        - name: init-redis
          image: registry.ocp4.time-gate.io:5000/redis/redis:${REDIS_VERSION}
          command:
          - bash
          - "-c"
          - |
            cp /mnt/config-map/redis.conf /etc/redis.conf
          volumeMounts:
          - name: conf
            mountPath: /etc
            subPath: redis.conf
          - name: config-map
            mountPath: /mnt/config-map
        containers:
        - name: ${DATABASE_SERVICE_NAME}
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
          image: registry.ocp4.time-gate.io:5000/redis/redis:${REDIS_VERSION}
          command: ["redis-server"]
          args: ["/etc/redis.conf"]
          env:
          - name: ALLOW_EMPTY_PASSWORD
            value: "yes"
          ports:
          - name: redis
            containerPort: 6379
          volumeMounts:
          - name: redis-data
            mountPath: /data
          - name: conf
            mountPath: /etc/
            subPath: redis.conf
        volumes:
        - name: config-map
          configMap:
            name: ${DATABASE_SERVICE_NAME}
            items:
            - key: redis.conf
              path: redis.conf
        - name: conf
          emptyDir: {}
        - name: redis-data
          persistentVolumeMount:
            claimName: ${DATABASE_SERVICE_NAME}
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${DATABASE_SERVICE_NAME}
  data:
    redis.conf: |
      bind 0.0.0.0
      protected-mode no
      port 6379
      tcp-backlog 511
      timeout 0
      tcp-keepalive 300
      daemonize no
      supervised no
      pidfile /var/run/redis_6379.pid
      loglevel notice
      logfile ""
      cluster-enabled yes
      cluster-config-file nodes.conf
      cluster-node-timeout 3000
      appendonly no        
parameters:
- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  value: openshift
- description: The name of the OpenShift Service exposed for the database.
  displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: redis
- description: Password for the Redis connection user.
  displayName: Redis Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: REDIS_PASSWORD
  required: true
- description: Volume space available for data, e.g. 512Mi, 2Gi.
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: Version of Redis image to be used (7.0.11).
  displayName: Version of Redis Image
  name: REDIS_VERSION
  required: true
  value: 7.0.11
